import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
import logging
import os
import sys
import importlib
from aiogram.client.default import DefaultBotProperties

from config import TELEGRAM_BOT_TOKEN, TELEGRAM_ADMIN_ID
import config

# –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–ª–µ
from main import AggressiveFuturesTrader

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç —Ç—Ä–µ–π–¥–µ—Ä–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ singleton –∏–ª–∏ manager)
trader: AggressiveFuturesTrader = None

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def reload_config():
    importlib.reload(config)

def set_enable_trading(value: bool):
    # –ú–µ–Ω—è–µ–º —Ñ–ª–∞–≥ –≤ config.py (–∏ –≤ –ø–∞–º—è—Ç–∏)
    with open('config.py', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    with open('config.py', 'w', encoding='utf-8') as f:
        for line in lines:
            if line.strip().startswith('ENABLE_TRADING'):
                f.write(f'ENABLE_TRADING = {str(value)}  # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram\n')
            else:
                f.write(line)
    reload_config()
    logger.info(f"ENABLE_TRADING –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {value} —á–µ—Ä–µ–∑ Telegram")

def set_demo_mode(value: bool):
    # –ú–µ–Ω—è–µ–º —Ñ–ª–∞–≥ DEMO_MODE –≤ config.py (–∏ –≤ –ø–∞–º—è—Ç–∏)
    with open('config.py', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    with open('config.py', 'w', encoding='utf-8') as f:
        for line in lines:
            if line.strip().startswith('DEMO_MODE'):
                f.write(f'DEMO_MODE = {str(value)}  # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram\n')
            else:
                f.write(line)
    reload_config()
    logger.info(f"DEMO_MODE –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {value} —á–µ—Ä–µ–∑ Telegram")

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    await message.answer("<b>ü§ñ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/status ‚Äî —Å—Ç–∞—Ç—É—Å\n/enable ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é\n/disable ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é\n/positions ‚Äî –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n/logs ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏\n/switch ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º")

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    reload_config()
    status = "üü¢ –í–ö–õ–Æ–ß–ï–ù–ê" if config.ENABLE_TRADING else "üî¥ –û–¢–ö–õ–Æ–ß–ï–ù–ê"
    await message.answer(f"<b>–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {status}\n\n<b>–î–µ–º–æ-—Ä–µ–∂–∏–º:</b> {'üü¢' if config.DEMO_MODE else 'üî¥'}")

@dp.message(Command("enable"))
async def cmd_enable(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    set_enable_trading(True)
    await message.answer("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è <b>–í–ö–õ–Æ–ß–ï–ù–ê</b>")

@dp.message(Command("disable"))
async def cmd_disable(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    set_enable_trading(False)
    await message.answer("‚õîÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è <b>–û–¢–ö–õ–Æ–ß–ï–ù–ê</b>")

@dp.message(Command("positions"))
async def cmd_positions(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: —á–∏—Ç–∞–µ–º –∏–∑ trading.log –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    if not os.path.exists('trading.log'):
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏—è—Ö.")
        return
    with open('trading.log', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    positions = [l for l in lines if '–ü–û–ó–ò–¶–ò–Ø –û–¢–ö–†–´–¢–ê' in l]
    if not positions:
        await message.answer("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
        return
    await message.answer("<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n" + ''.join(positions[-5:]), parse_mode=ParseMode.HTML)

@dp.message(Command("logs"))
async def cmd_logs(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    if not os.path.exists('trading.log'):
        await message.answer("–ù–µ—Ç –ª–æ–≥–æ–≤.")
        return
    with open('trading.log', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    await message.answer("<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n<pre>" + ''.join(lines[-20:]) + "</pre>", parse_mode=ParseMode.HTML)

@dp.message(Command("switch"))
async def cmd_switch(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    reload_config()
    if config.DEMO_MODE:
        set_demo_mode(False)
        await message.answer("‚ö°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ <b>–†–ï–ê–õ–¨–ù–£–Æ –¢–û–†–ì–û–í–õ–Æ</b>! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!")
    else:
        set_demo_mode(True)
        await message.answer("üü¢ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ <b>–î–ï–ú–û-–†–ï–ñ–ò–ú</b>.")

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 