import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import logging
import os
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_ADMIN_ID, ENABLE_TRADING, DEMO_MODE
from trader import AggressiveFuturesTrader
from aiogram.client.default import DefaultBotProperties
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg_bot")

bot = Bot(
    token=TELEGRAM_BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

trader = AggressiveFuturesTrader()
trading_task = None

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å", callback_data="status"),
            InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="enable")
        ],
        [
            InlineKeyboardButton(text="‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="disable"),
            InlineKeyboardButton(text="üìà –ü–æ–∑–∏—Ü–∏–∏", callback_data="positions")
        ],
        [
            InlineKeyboardButton(text="üìã –õ–æ–≥–∏", callback_data="logs"),
            InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º", callback_data="switch")
        ],
        [
            InlineKeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
            InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ]
    ])
    return keyboard

def get_balance_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="check_balance"),
            InlineKeyboardButton(text="üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É–º–º—É", callback_data="set_amount")
        ],
        [
            InlineKeyboardButton(text="üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="current_settings"),
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
    ])
    return keyboard

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    await message.answer(
        "<b>ü§ñ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    status = "üü¢ –í–ö–õ–Æ–ß–ï–ù–ê" if trader.is_running() else "üî¥ –û–¢–ö–õ–Æ–ß–ï–ù–ê"
    await message.answer(f"<b>–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {status}\n<b>–î–µ–º–æ-—Ä–µ–∂–∏–º:</b> {'üü¢' if trader.current_balance == trader.initial_balance or DEMO_MODE else 'üî¥'}")

@dp.message(Command("enable"))
async def cmd_enable(message: types.Message):
    global trading_task
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    if trader.is_running():
        await message.answer("–¢–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
        return
    trading_task = asyncio.create_task(trader.run_trading_cycle())
    await message.answer("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è <b>–í–ö–õ–Æ–ß–ï–ù–ê</b>")

@dp.message(Command("disable"))
async def cmd_disable(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    if not trader.is_running():
        await message.answer("–¢–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return
    trader.stop()
    await message.answer("‚õîÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è <b>–û–¢–ö–õ–Æ–ß–ï–ù–ê</b>")

@dp.message(Command("positions"))
async def cmd_positions(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    positions = [f"{s}: {p}" for s, p in trader.current_positions.items() if p]
    if not positions:
        await message.answer("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
        return
    await message.answer("<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n" + "\n".join(positions))

@dp.message(Command("logs"))
async def cmd_logs(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    if not os.path.exists('trading.log'):
        await message.answer("–ù–µ—Ç –ª–æ–≥–æ–≤.")
        return
    with open('trading.log', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    await message.answer("<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n<pre>" + ''.join(lines[-20:]) + "</pre>", parse_mode=ParseMode.HTML)

@dp.message(Command("debug"))
async def cmd_debug(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    import config
    debug_info = f"""
<b>üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ë–û–¢–ê</b>

<b>–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {'üü¢ –í–ö–õ–Æ–ß–ï–ù–ê' if trader.is_running() else 'üî¥ –û–¢–ö–õ–Æ–ß–ï–ù–ê'}
<b>–î–µ–º–æ-—Ä–µ–∂–∏–º:</b> {'üü¢ –í–ö–õ–Æ–ß–ï–ù' if config.DEMO_MODE else 'üî¥ –û–¢–ö–õ–Æ–ß–ï–ù'}
<b>–†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è:</b> {'üü¢ –í–ö–õ–Æ–ß–ï–ù–ê' if config.ENABLE_TRADING else 'üî¥ –û–¢–ö–õ–Æ–ß–ï–ù–ê'}

<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>
‚Ä¢ –¢–µ–ª–æ —Å–≤–µ—á–∏: {config.CANDLE_BODY_THRESHOLD}%
‚Ä¢ –ü–µ—Ä–∏–æ–¥ –æ–±—ä–µ–º–∞: {config.VOLUME_PERIOD}
‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {config.TAKE_PROFIT_PERCENT}%
‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: {config.STOP_LOSS_PERCENT}%

<b>–ë–∞–ª–∞–Ω—Å:</b> ${trader.get_balance():.2f}
<b>–¶–µ–ª—å:</b> ${config.TARGET_BALANCE}

<b>–ü–æ–∑–∏—Ü–∏–∏:</b> {len([p for p in trader.current_positions.values() if p])}
<b>–°–¥–µ–ª–∫–∏ –∑–∞ –¥–µ–Ω—å:</b> {trader.daily_trades}
"""
    await message.answer(debug_info)

@dp.message(Command("switch"))
async def cmd_switch(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –≤ config.py
    import config
    import importlib
    importlib.reload(config)
    # –ß–∏—Ç–∞–µ–º –∏ –º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫–∏
    with open('config.py', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    new_lines = []
    new_enable = None
    new_demo = None
    for line in lines:
        if line.strip().startswith('ENABLE_TRADING'):
            if 'True' in line:
                new_lines.append('ENABLE_TRADING = False  # –û—Ç–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram\n')
                new_enable = False
            else:
                new_lines.append('ENABLE_TRADING = True  # –í–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram\n')
                new_enable = True
        elif line.strip().startswith('DEMO_MODE'):
            if 'True' in line:
                new_lines.append('DEMO_MODE = False  # –û—Ç–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram\n')
                new_demo = False
            else:
                new_lines.append('DEMO_MODE = True  # –í–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram\n')
                new_demo = True
        else:
            new_lines.append(line)
    with open('config.py', 'w', encoding='utf-8') as f:
        f.writelines(new_lines)
    importlib.reload(config)
    if new_enable and not new_demo:
        await message.answer('‚ö°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ <b>–†–ï–ê–õ–¨–ù–£–Æ –¢–û–†–ì–û–í–õ–Æ</b>! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!')
    else:
        await message.answer('üü¢ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ <b>–î–ï–ú–û-–†–ï–ñ–ò–ú</b>.')

# --- Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.callback_query()
async def handle_callback(callback: CallbackQuery):
    if callback.from_user.id != TELEGRAM_ADMIN_ID:
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    if callback.data == "main_menu":
        await callback.message.edit_text(
            "<b>ü§ñ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
    
    elif callback.data == "status":
        status = "üü¢ –í–ö–õ–Æ–ß–ï–ù–ê" if trader.is_running() else "üî¥ –û–¢–ö–õ–Æ–ß–ï–ù–ê"
        await callback.message.edit_text(
            f"<b>–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {status}\n<b>–î–µ–º–æ-—Ä–µ–∂–∏–º:</b> {'üü¢' if trader.current_balance == trader.initial_balance or DEMO_MODE else 'üî¥'}",
            reply_markup=get_main_keyboard()
        )
    
    elif callback.data == "enable":
        global trading_task
        if trader.is_running():
            await callback.answer("–¢–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
            return
        trading_task = asyncio.create_task(trader.run_trading_cycle())
        await callback.message.edit_text(
            "‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è <b>–í–ö–õ–Æ–ß–ï–ù–ê</b>",
            reply_markup=get_main_keyboard()
        )
    
    elif callback.data == "disable":
        if not trader.is_running():
            await callback.answer("–¢–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
            return
        trader.stop()
        await callback.message.edit_text(
            "‚õîÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è <b>–û–¢–ö–õ–Æ–ß–ï–ù–ê</b>",
            reply_markup=get_main_keyboard()
        )
    
    elif callback.data == "positions":
        positions = [f"{s}: {p}" for s, p in trader.current_positions.items() if p]
        if not positions:
            await callback.message.edit_text(
                "–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.",
                reply_markup=get_main_keyboard()
            )
        else:
            await callback.message.edit_text(
                "<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n" + "\n".join(positions),
                reply_markup=get_main_keyboard()
            )
    
    elif callback.data == "logs":
        if not os.path.exists('trading.log'):
            await callback.message.edit_text(
                "–ù–µ—Ç –ª–æ–≥–æ–≤.",
                reply_markup=get_main_keyboard()
            )
        else:
            with open('trading.log', 'r', encoding='utf-8') as f:
                lines = f.readlines()
            await callback.message.edit_text(
                "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n<pre>" + ''.join(lines[-20:]) + "</pre>",
                reply_markup=get_main_keyboard()
            )
    
    elif callback.data == "balance":
        await callback.message.edit_text(
            "<b>üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_balance_keyboard()
        )
    
    elif callback.data == "check_balance":
        try:
            balance = trader.get_balance()
            await callback.answer(f"üí≥ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n<i>{datetime.now().strftime('%H:%M:%S')}</i>", show_alert=True)
        except Exception as e:
            await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}", show_alert=True)
    
    elif callback.data == "set_amount":
        await callback.message.edit_text(
            "<b>üíµ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É–º–º—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –≤ USD (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100)",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="balance")]
            ])
        )
    
    elif callback.data == "current_settings":
        import config
        settings_info = f"""
<b>‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>

<b>–ë–∞–ª–∞–Ω—Å:</b> ${trader.get_balance():.2f}
<b>–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å:</b> ${config.INITIAL_BALANCE}
<b>–¶–µ–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å:</b> ${config.TARGET_BALANCE}
<b>–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:</b> {config.POSITION_SIZE_PERCENT}%
<b>–ü–ª–µ—á–æ:</b> x{config.LEVERAGE}

<b>–°—Ç—Ä–∞—Ç–µ–≥–∏—è:</b>
‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {config.TAKE_PROFIT_PERCENT}%
‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: {config.STOP_LOSS_PERCENT}%
‚Ä¢ –¢–µ–ª–æ —Å–≤–µ—á–∏: {config.CANDLE_BODY_THRESHOLD}%
"""
        await callback.message.edit_text(
            settings_info,
            reply_markup=get_balance_keyboard()
        )
    
    elif callback.data == "switch":
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
        import config
        import importlib
        importlib.reload(config)
        with open('config.py', 'r', encoding='utf-8') as f:
            lines = f.readlines()
        new_lines = []
        new_enable = None
        new_demo = None
        for line in lines:
            if line.strip().startswith('ENABLE_TRADING'):
                if 'True' in line:
                    new_lines.append('ENABLE_TRADING = False  # –û—Ç–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram\n')
                    new_enable = False
                else:
                    new_lines.append('ENABLE_TRADING = True  # –í–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram\n')
                    new_enable = True
            elif line.strip().startswith('DEMO_MODE'):
                if 'True' in line:
                    new_lines.append('DEMO_MODE = False  # –û—Ç–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram\n')
                    new_demo = False
                else:
                    new_lines.append('DEMO_MODE = True  # –í–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram\n')
                    new_demo = True
            else:
                new_lines.append(line)
        with open('config.py', 'w', encoding='utf-8') as f:
            f.writelines(new_lines)
        importlib.reload(config)
        if new_enable and not new_demo:
            await callback.message.edit_text(
                '‚ö°Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ <b>–†–ï–ê–õ–¨–ù–£–Æ –¢–û–†–ì–û–í–õ–Æ</b>! –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!',
                reply_markup=get_main_keyboard()
            )
        else:
            await callback.message.edit_text(
                'üü¢ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ <b>–î–ï–ú–û-–†–ï–ñ–ò–ú</b>.',
                reply_markup=get_main_keyboard()
            )
    
    elif callback.data == "settings":
        import config
        settings_info = f"""
<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>

<b>–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {'üü¢ –í–ö–õ–Æ–ß–ï–ù–ê' if config.ENABLE_TRADING else 'üî¥ –û–¢–ö–õ–Æ–ß–ï–ù–ê'}
<b>–î–µ–º–æ-—Ä–µ–∂–∏–º:</b> {'üü¢ –í–ö–õ–Æ–ß–ï–ù' if config.DEMO_MODE else 'üî¥ –û–¢–ö–õ–Æ–ß–ï–ù'}

<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b>
‚Ä¢ –¢–µ–ª–æ —Å–≤–µ—á–∏: {config.CANDLE_BODY_THRESHOLD}%
‚Ä¢ –ü–µ—Ä–∏–æ–¥ –æ–±—ä–µ–º–∞: {config.VOLUME_PERIOD}
‚Ä¢ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: {config.TAKE_PROFIT_PERCENT}%
‚Ä¢ –°—Ç–æ–ø-–ª–æ—Å—Å: {config.STOP_LOSS_PERCENT}%
‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {config.POSITION_SIZE_PERCENT}%
‚Ä¢ –ü–ª–µ—á–æ: x{config.LEVERAGE}

<b>–ë–∞–ª–∞–Ω—Å:</b> ${trader.get_balance():.2f}
<b>–¶–µ–ª—å:</b> ${config.TARGET_BALANCE}
"""
        await callback.message.edit_text(
            settings_info,
            reply_markup=get_main_keyboard()
        )

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 