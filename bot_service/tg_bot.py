import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ParseMode
import logging
import os
from config import TELEGRAM_BOT_TOKEN, TELEGRAM_ADMIN_ID
from trader import AggressiveFuturesTrader

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tg_bot")

bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

trader = AggressiveFuturesTrader()
trading_task = None

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    await message.answer("<b>ü§ñ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥-–±–æ—Ç</b>\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/status ‚Äî —Å—Ç–∞—Ç—É—Å\n/enable ‚Äî –≤–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é\n/disable ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é\n/positions ‚Äî –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏\n/logs ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏")

@dp.message(Command("status"))
async def cmd_status(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    status = "üü¢ –í–ö–õ–Æ–ß–ï–ù–ê" if trader.is_running() else "üî¥ –û–¢–ö–õ–Æ–ß–ï–ù–ê"
    await message.answer(f"<b>–°—Ç–∞—Ç—É—Å —Ç–æ—Ä–≥–æ–≤–ª–∏:</b> {status}\n<b>–î–µ–º–æ-—Ä–µ–∂–∏–º:</b> {'üü¢' if trader.current_balance == trader.initial_balance else 'üî¥'}")

@dp.message(Command("enable"))
async def cmd_enable(message: types.Message):
    global trading_task
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    if trader.is_running():
        await message.answer("–¢–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞!")
        return
    trading_task = asyncio.create_task(trader.run_trading_cycle())
    await message.answer("‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è <b>–í–ö–õ–Æ–ß–ï–ù–ê</b>")

@dp.message(Command("disable"))
async def cmd_disable(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    if not trader.is_running():
        await message.answer("–¢–æ—Ä–≥–æ–≤–ª—è —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        return
    trader.stop()
    await message.answer("‚õîÔ∏è –¢–æ—Ä–≥–æ–≤–ª—è <b>–û–¢–ö–õ–Æ–ß–ï–ù–ê</b>")

@dp.message(Command("positions"))
async def cmd_positions(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    positions = [f"{s}: {p}" for s, p in trader.current_positions.items() if p]
    if not positions:
        await message.answer("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π.")
        return
    await message.answer("<b>–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:</b>\n" + "\n".join(positions))

@dp.message(Command("logs"))
async def cmd_logs(message: types.Message):
    if message.from_user.id != TELEGRAM_ADMIN_ID:
        await message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    if not os.path.exists('trading.log'):
        await message.answer("–ù–µ—Ç –ª–æ–≥–æ–≤.")
        return
    with open('trading.log', 'r', encoding='utf-8') as f:
        lines = f.readlines()
    await message.answer("<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏:</b>\n<pre>" + ''.join(lines[-20:]) + "</pre>", parse_mode=ParseMode.HTML)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 